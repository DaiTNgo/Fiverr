@use './breakpoints' as *;
@use './variables' as *;
@use './functions' as *;
@use 'sass:map';
@mixin responsive($screen) {
	$value: map.get(
		$map: $breakpoints,
		$key: $screen,
	);
	@media screen and (max-width: $value - 0.01em) {
		@content;
	}
}
@mixin text($fs, $color: inherit, $fw: inherit) {
	font-size: $fs;
	line-height: 1.5;
	font-weight: $fw;
	color: $color;
}
@mixin search($fs, $py, $px, $br, $colorbd, $colorbgh) {
	.search {
		display: flex;
		align-items: center;
		font-size: $fs;
		background-color: $bgc-primary;
		border-radius: $br;
		overflow: hidden;
		&__left {
			display: flex;
			align-items: center;
			border: 1px solid $colorbd;
			border-right: 0;
			border-radius: $br 0 0 $br;
			flex-grow: 1;
			input {
				border: 0;
				outline: 0;
				padding: $py 0 $py $px;
				width: 100%;
				color: black;
				&::placeholder {
					color: $color-primary;
				}
			}
			i {
				padding-left: $px;
			}
		}
		&__right {
			button {
				border: 1px solid transparent;
				background-color: $color-green-100;
				padding: $py $py * 2;
				border-radius: 0 $br $br 0;
				cursor: pointer;
				color: $color-secondary;
				font-weight: bold;
				transition: all 0.3s;
				&:hover {
					background-color: $colorbgh;
				}
			}
		}
	}
}
@mixin button(
	$font-size,
	$color,
	$background-color,
	$border-radius,
	$py,
	$px,
	$color-hover,
	$background-color-hover,
	$border-color: currentColor,
	$border-color-hover: $background-color-hover
) {
	color: $color;
	background-color: $background-color;
	border: 1px solid $border-color;
	border-radius: $border-radius;
	padding: $py $px;
	font-size: $font-size;
	cursor: pointer;
	font-weight: bold;
	transition: all 0.5s;
	&:hover {
		background-color: $background-color-hover;
		color: $color-hover;
		border-color: $border-color-hover;
	}
}

@mixin special-text($color, $border-color: currentColor) {
	padding: 0.1rem 0.7rem;
	font-size: 1.2rem;
	color: $color;
	border-radius: 100rem;
	margin-left: 0.5rem;
	border: 1px solid $border-color;
}
